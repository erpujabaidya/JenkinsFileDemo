def Pipeline_Message
pipeline{
    environment {
    registry = "arnablens/fulldemo"
    registryCredential = 'DockerHub_Arnab'
    dockerImage= ''
  }
  agent any
  
  stages {
    stage('Cloning Git') {
      steps {
        git branch:'master', url:'https://github.com/Arnablens/codingchallenge2.git'
        script 
        {
            Pipeline_Message=env.STAGE_NAME
            echo "Cloning Git"
        }
      }
    }
   
    stage('Clean Old Packages') 
    {
        steps
        {
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Cleaning old packages"
            }
            dir("/var/lib/jenkins/workspace/fulldemoarnab/company")
            {
                sh label: 'Clean', script: 'mvn clean'
            }
        }
    }
    stage('Maven Compile') 
    {
        steps
        {
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Maven Compile"
            }
            dir("/var/lib/jenkins/workspace/fulldemoarnab/company")
            {
                sh label: 'Compile', script: 'mvn compile'
            }
        }
    }
    stage('Maven Package and install') 
    {
        steps
        {
            dir("/var/lib/jenkins/workspace/fulldemoarnab/company")
            {
                sh label: 'Testing', script: 'mvn clean install'
            }
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Package and Install"
            }
        }
    }
    stage('Sonar Analysis')
    {
        steps
        {
             script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Sonar Analysis"
            }
            dir("/var/lib/jenkins/workspace/fulldemoarnab/company/")
            {
                withSonarQubeEnv('SonarQube')
                {
                    sh 'mvn sonar:sonar'
                }
            }
        }
    }
    stage("Quality Gate") 
    {
        steps 
        {
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Quality gate"
            }
            timeout(time: 1, unit: 'HOURS') 
            {
                waitForQualityGate abortPipeline: true
            }
        }
    }
    
    stage('Jfrog Artifactory')
    {
        steps
        {
            script
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Uploaded to Jfrog Artifactory"
                def server= Artifactory.server 'Artifactory'
                def uploadSpec= """{
                    "files": [{
                    "pattern": "/var/lib/jenkins/workspace/fulldemoarnab/company/target/*.war",
                    "target": "fulldemoarnab"}]
                }"""
                server.upload(uploadSpec)
            }
        }
    }
    stage('Create image') 
    {
        steps
        {
            script
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Creating Image"
            }
            dir("/var/lib/jenkins/workspace/fulldemoarnab/company/")
            {
                script 
                {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
    }
    stage('Push Image') 
    {
        steps
        {
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Push Image"
                docker.withRegistry( '', registryCredential ) 
                {
                    dockerImage.push()
                }
            }
        }
    }
    stage('Remove Unused docker image') 
    {
        steps
        {
            script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Removing Unused Docker Image"
            }
            sh "docker rmi $registry:$BUILD_NUMBER"
            
        }
    }
    stage('pull image from dockerhub')
    {
        steps
        {
            script
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Docker Pull"
                sh "docker pull $registry:$BUILD_NUMBER"
            }
        }
    }
    stage('deployee the image in the tomcat server')
    {
        steps
        {
            script
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Docker Container Run"
                sh"docker run -d -p 8087:8080 --name fulldemoarnab -v /var/lib/tomcat8/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml $registry:$BUILD_NUMBER"
            }
        }
    }
    
  }
    post 
    {  
        always 
        {  
            echo 'This will always run'  
        }
        success {
            mail bcc: '', body: 'project is successfully builded', from: '', replyTo: '', subject: 'project successfully finished.', to: 'Puja.Baidya@mindtree.com'
        }
        failure {
            mail bcc: '', body:"Failed stage name: ${Pipeline_Message}; This needs to be resolved... ${env.BUILD_URL} has result ${currentBuild.result}", from: '', replyTo: '', subject:"Status of pipeline: ${currentBuild.fullDisplayName}", to: 'Puja.Baidya@mindtree.com'
        }
    }  
}
